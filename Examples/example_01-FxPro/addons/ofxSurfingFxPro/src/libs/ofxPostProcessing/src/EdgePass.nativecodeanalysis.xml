<?xml version="1.0" encoding="UTF-8"?>
<DEFECTS>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\moebi\OneDrive\Documents\openFrameworks\libs\boost\include\boost\exception\</FILEPATH>
      <FILENAME>exception.hpp</FILENAME>
      <LINE>173</LINE>
      <COLUMN>13</COLUMN>
    </SFA>
    <DEFECTCODE>26439</DEFECTCODE>
    <DESCRIPTION>This kind of function should not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>boost::exception_detail::error_info_container::{dtor}</FUNCTION>
    <DECORATED>??1error_info_container@exception_detail@boost@@IEAA@XZ</DECORATED>
    <FUNCLINE>173</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\moebi\OneDrive\Documents\openFrameworks\libs\boost\include\boost\exception\</FILEPATH>
      <FILENAME>exception.hpp</FILENAME>
      <LINE>304</LINE>
      <COLUMN>5</COLUMN>
    </SFA>
    <DEFECTCODE>26439</DEFECTCODE>
    <DESCRIPTION>This kind of function should not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>boost::exception::{dtor}</FUNCTION>
    <DECORATED>??1exception@boost@@MEAA@XZ</DECORATED>
    <FUNCLINE>304</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\moebi\OneDrive\Documents\openFrameworks\libs\boost\include\boost\exception\</FILEPATH>
      <FILENAME>exception.hpp</FILENAME>
      <LINE>428</LINE>
      <COLUMN>13</COLUMN>
    </SFA>
    <DEFECTCODE>26439</DEFECTCODE>
    <DESCRIPTION>This kind of function should not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>boost::exception_detail::clone_base::{dtor}</FUNCTION>
    <DECORATED>??1clone_base@exception_detail@boost@@UEAA@XZ</DECORATED>
    <FUNCLINE>428</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\moebi\OneDrive\Documents\openFrameworks\libs\boost\include\boost\smart_ptr\detail\</FILEPATH>
      <FILENAME>shared_count.hpp</FILENAME>
      <LINE>442</LINE>
      <COLUMN>4</COLUMN>
    </SFA>
    <DEFECTCODE>26439</DEFECTCODE>
    <DESCRIPTION>This kind of function should not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>boost::detail::shared_count::{ctor}</FUNCTION>
    <DECORATED>??0shared_count@detail@boost@@QEAA@$$QEAV012@@Z</DECORATED>
    <FUNCLINE>442</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\moebi\OneDrive\Documents\openFrameworks\libs\boost\include\boost\smart_ptr\detail\</FILEPATH>
      <FILENAME>shared_count.hpp</FILENAME>
      <LINE>559</LINE>
      <COLUMN>4</COLUMN>
    </SFA>
    <DEFECTCODE>26439</DEFECTCODE>
    <DESCRIPTION>This kind of function should not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>boost::detail::weak_count::{ctor}</FUNCTION>
    <DECORATED>??0weak_count@detail@boost@@QEAA@$$QEAV012@@Z</DECORATED>
    <FUNCLINE>559</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\moebi\OneDrive\Documents\openFrameworks\libs\openFrameworks\utils\</FILEPATH>
      <FILENAME>ofLog.h</FILENAME>
      <LINE>529</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'ofLog::level' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>ofLog::{ctor}</FUNCTION>
    <DECORATED>??0ofLog@@AEAA@AEBV0@@Z</DECORATED>
    <FUNCLINE>529</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>ofLog::level</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\moebi\OneDrive\Documents\openFrameworks\libs\openFrameworks\utils\</FILEPATH>
      <FILENAME>ofLog.h</FILENAME>
      <LINE>529</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'ofLog::bPrinted' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>ofLog::{ctor}</FUNCTION>
    <DECORATED>??0ofLog@@AEAA@AEBV0@@Z</DECORATED>
    <FUNCLINE>529</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>ofLog::bPrinted</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\moebi\OneDrive\Documents\openFrameworks\libs\utf8\include\utf8\</FILEPATH>
      <FILENAME>core.h</FILENAME>
      <LINE>53</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26454</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: '-' operation produces a negative unsigned result at compile time (io.5).</DESCRIPTION>
    <FUNCTION>utf8::internal::SURROGATE_OFFSET</FUNCTION>
    <DECORATED>?SURROGATE_OFFSET@internal@utf8@@3IB</DECORATED>
    <FUNCLINE>53</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\moebi\OneDrive\Documents\openFrameworks\libs\json\include\</FILEPATH>
      <FILENAME>json.hpp</FILENAME>
      <LINE>11892</LINE>
      <COLUMN>56</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>nlohmann::detail::dtoa_impl::format_buffer</FUNCTION>
    <DECORATED>?format_buffer@dtoa_impl@detail@nlohmann@@YAPEADPEADHHHH@Z</DECORATED>
    <FUNCLINE>11874</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\moebi\OneDrive\Documents\openFrameworks\libs\json\include\</FILEPATH>
      <FILENAME>json.hpp</FILENAME>
      <LINE>11896</LINE>
      <COLUMN>24</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>nlohmann::detail::dtoa_impl::format_buffer</FUNCTION>
    <DECORATED>?format_buffer@dtoa_impl@detail@nlohmann@@YAPEADPEADHHHH@Z</DECORATED>
    <FUNCLINE>11874</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\moebi\OneDrive\Documents\openFrameworks\libs\json\include\</FILEPATH>
      <FILENAME>json.hpp</FILENAME>
      <LINE>11906</LINE>
      <COLUMN>30</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>nlohmann::detail::dtoa_impl::format_buffer</FUNCTION>
    <DECORATED>?format_buffer@dtoa_impl@detail@nlohmann@@YAPEADPEADHHHH@Z</DECORATED>
    <FUNCLINE>11874</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\moebi\OneDrive\Documents\openFrameworks\libs\json\include\</FILEPATH>
      <FILENAME>json.hpp</FILENAME>
      <LINE>11906</LINE>
      <COLUMN>67</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>nlohmann::detail::dtoa_impl::format_buffer</FUNCTION>
    <DECORATED>?format_buffer@dtoa_impl@detail@nlohmann@@YAPEADPEADHHHH@Z</DECORATED>
    <FUNCLINE>11874</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\moebi\OneDrive\Documents\openFrameworks\libs\json\include\</FILEPATH>
      <FILENAME>json.hpp</FILENAME>
      <LINE>11908</LINE>
      <COLUMN>24</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>nlohmann::detail::dtoa_impl::format_buffer</FUNCTION>
    <DECORATED>?format_buffer@dtoa_impl@detail@nlohmann@@YAPEADPEADHHHH@Z</DECORATED>
    <FUNCLINE>11874</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\moebi\OneDrive\Documents\openFrameworks\libs\json\include\</FILEPATH>
      <FILENAME>json.hpp</FILENAME>
      <LINE>11916</LINE>
      <COLUMN>30</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>nlohmann::detail::dtoa_impl::format_buffer</FUNCTION>
    <DECORATED>?format_buffer@dtoa_impl@detail@nlohmann@@YAPEADPEADHHHH@Z</DECORATED>
    <FUNCLINE>11874</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\moebi\OneDrive\Documents\openFrameworks\libs\json\include\</FILEPATH>
      <FILENAME>json.hpp</FILENAME>
      <LINE>11920</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>nlohmann::detail::dtoa_impl::format_buffer</FUNCTION>
    <DECORATED>?format_buffer@dtoa_impl@detail@nlohmann@@YAPEADPEADHHHH@Z</DECORATED>
    <FUNCLINE>11874</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\moebi\OneDrive\Documents\openFrameworks\libs\json\include\</FILEPATH>
      <FILENAME>json.hpp</FILENAME>
      <LINE>11920</LINE>
      <COLUMN>24</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>nlohmann::detail::dtoa_impl::format_buffer</FUNCTION>
    <DECORATED>?format_buffer@dtoa_impl@detail@nlohmann@@YAPEADPEADHHHH@Z</DECORATED>
    <FUNCLINE>11874</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\moebi\OneDrive\Documents\openFrameworks\libs\json\include\</FILEPATH>
      <FILENAME>json.hpp</FILENAME>
      <LINE>11935</LINE>
      <COLUMN>61</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>nlohmann::detail::dtoa_impl::format_buffer</FUNCTION>
    <DECORATED>?format_buffer@dtoa_impl@detail@nlohmann@@YAPEADPEADHHHH@Z</DECORATED>
    <FUNCLINE>11874</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\moebi\OneDrive\Documents\openFrameworks\libs\json\include\</FILEPATH>
      <FILENAME>json.hpp</FILENAME>
      <LINE>11937</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>nlohmann::detail::dtoa_impl::format_buffer</FUNCTION>
    <DECORATED>?format_buffer@dtoa_impl@detail@nlohmann@@YAPEADPEADHHHH@Z</DECORATED>
    <FUNCLINE>11874</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\moebi\OneDrive\Documents\openFrameworks\libs\openFrameworks\gl\</FILEPATH>
      <FILENAME>ofShader.h</FILENAME>
      <LINE>45</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'ofShader::Source::type' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>ofShader::Source::{ctor}</FUNCTION>
    <DECORATED>??0Source@ofShader@@QEAA@XZ</DECORATED>
    <FUNCLINE>45</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>ofShader::Source::type</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\moebi\OneDrive\Documents\openFrameworks\libs\json\include\</FILEPATH>
      <FILENAME>json.hpp</FILENAME>
      <LINE>12797</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>28020</DEFECTCODE>
    <DESCRIPTION>The expression '0&lt;=_Param_(1)&amp;&amp;_Param_(1)&lt;=400-1' is not true at this call.</DESCRIPTION>
    <FUNCTION>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map,std::vector,std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;,bool,__int64,unsigned __int64,double,std::allocator,nlohmann::adl_serializer&gt; &gt;::decode</FUNCTION>
    <DECORATED>?decode@?$serializer@V?$basic_json@Vmap@std@@Vvector@2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@_N_J_KNVallocator@2@Uadl_serializer@nlohmann@@@nlohmann@@@detail@nlohmann@@CAEAEAEAEAIE@Z</DECORATED>
    <FUNCLINE>12775</FUNCLINE>
    <PATH>
      <SFA>
        <FILEPATH>c:\users\moebi\onedrive\documents\openframeworks\libs\json\include\</FILEPATH>
        <FILENAME>json.hpp</FILENAME>
        <LINE>12777</LINE>
        <COLUMN>51</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>c:\users\moebi\onedrive\documents\openframeworks\libs\json\include\</FILEPATH>
        <FILENAME>json.hpp</FILENAME>
        <LINE>12797</LINE>
        <COLUMN>27</COLUMN>
      </SFA>
    </PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\moebi\OneDrive\Documents\openFrameworks\libs\json\include\</FILEPATH>
      <FILENAME>json.hpp</FILENAME>
      <LINE>12803</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map,std::vector,std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;,bool,__int64,unsigned __int64,double,std::allocator,nlohmann::adl_serializer&gt; &gt;::decode</FUNCTION>
    <DECORATED>?decode@?$serializer@V?$basic_json@Vmap@std@@Vvector@2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@_N_J_KNVallocator@2@Uadl_serializer@nlohmann@@@nlohmann@@@detail@nlohmann@@CAEAEAEAEAIE@Z</DECORATED>
    <FUNCLINE>12775</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\moebi\OneDrive\Documents\openFrameworks\libs\json\include\</FILEPATH>
      <FILENAME>json.hpp</FILENAME>
      <LINE>12803</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map,std::vector,std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;,bool,__int64,unsigned __int64,double,std::allocator,nlohmann::adl_serializer&gt; &gt;::decode</FUNCTION>
    <DECORATED>?decode@?$serializer@V?$basic_json@Vmap@std@@Vvector@2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@_N_J_KNVallocator@2@Uadl_serializer@nlohmann@@@nlohmann@@@detail@nlohmann@@CAEAEAEAEAIE@Z</DECORATED>
    <FUNCLINE>12775</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\moebi\OneDrive\Documents\openFrameworks\libs\boost\include\boost\exception\</FILEPATH>
      <FILENAME>exception.hpp</FILENAME>
      <LINE>484</LINE>
      <COLUMN>13</COLUMN>
    </SFA>
    <DEFECTCODE>26439</DEFECTCODE>
    <DESCRIPTION>This kind of function should not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>boost::exception_detail::clone_impl&lt;boost::exception_detail::error_info_injector&lt;boost::bad_weak_ptr&gt; &gt;::{dtor}</FUNCTION>
    <DECORATED>??1?$clone_impl@U?$error_info_injector@Vbad_weak_ptr@boost@@@exception_detail@boost@@@exception_detail@boost@@UEAA@XZ</DECORATED>
    <FUNCLINE>484</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\moebi\OneDrive\Documents\openFrameworks\libs\boost\include\boost\exception\</FILEPATH>
      <FILENAME>exception.hpp</FILENAME>
      <LINE>358</LINE>
      <COLUMN>13</COLUMN>
    </SFA>
    <DEFECTCODE>26439</DEFECTCODE>
    <DESCRIPTION>This kind of function should not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>boost::exception_detail::error_info_injector&lt;boost::bad_weak_ptr&gt;::{dtor}</FUNCTION>
    <DECORATED>??1?$error_info_injector@Vbad_weak_ptr@boost@@@exception_detail@boost@@UEAA@XZ</DECORATED>
    <FUNCLINE>358</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
</DEFECTS>